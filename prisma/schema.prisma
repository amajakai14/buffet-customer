generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String       @id @default(cuid())
  name           String?
  email          String?      @unique
  password       String?
  emailVerified  DateTime?
  image          String?
  role           String?
  created_at     DateTime     @default(now())
  corporation_id String?
  accounts       Account[]
  Cart           Cart[]
  sessions       Session[]
  Corporation    Corporation? @relation(fields: [corporation_id], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Channel {
  id         String   @id @unique
  table_id   Int
  Desk       Desk     @relation(fields: [table_id], references: [id], onDelete: Cascade)
  course_id  Int
  Course     Course   @relation(fields: [course_id], references: [id], onDelete: Cascade)
  status     String
  time_start DateTime @default(now())
  time_end   DateTime
  Cart       Cart[]
  Order      Order[]
}

model Corporation {
  id           String         @id
  name         String?
  Course       Course[]
  CourseOnMenu CourseOnMenu[]
  Desk         Desk[]
  Menu         Menu[]
  User         User[]
}

model Course {
  id               Int            @id @default(autoincrement())
  course_name      String
  course_price     Int
  course_timelimit Int?           @default(90)
  course_priority  Int?
  created_at       DateTime       @default(now())
  updated_at       DateTime?
  corporation_id   String
  Corporation      Corporation    @relation(fields: [corporation_id], references: [id], onDelete: Cascade)
  CourseOnMenu     CourseOnMenu[]
  Channel          Channel[]
}

model CourseOnMenu {
  course_id      Int
  menu_id        Int
  corporation_id String
  Corporation    Corporation @relation(fields: [corporation_id], references: [id], onDelete: Cascade)
  Course         Course      @relation(fields: [course_id], references: [id], onDelete: Cascade)
  Menu           Menu        @relation(fields: [menu_id], references: [id], onDelete: Cascade)

  @@id([course_id, menu_id])
}

model Desk {
  id             Int         @id @default(autoincrement())
  table_name     String
  is_occupied    Boolean
  corporation_id String
  Corporation    Corporation @relation(fields: [corporation_id], references: [id], onDelete: Cascade)
  Channel        Channel[]
}

model Menu {
  id             Int            @id @default(autoincrement())
  menu_name      String
  menu_type      String
  price          Int            @default(0)
  available      Boolean        @default(true)
  hasImage       Boolean        @default(false)
  created_at     DateTime       @default(now())
  updated_at     DateTime?
  corporation_id String
  Cart           Cart[]
  CourseOnMenu   CourseOnMenu[]
  Corporation    Corporation    @relation(fields: [corporation_id], references: [id], onDelete: Cascade)
}

model Order {
  id           Int       @id @default(autoincrement())
  menu_id      Int
  order_amount Int
  total_price  Int
  process_type String
  created_at   DateTime  @default(now())
  updated_at   DateTime?
  channel_id   String
  Channel      Channel   @relation(fields: [channel_id], references: [id], onDelete: Cascade)
}

model Cart {
  id         Int     @id @default(autoincrement())
  channel_id String
  user_id    String
  menu_id    Int
  amount     Int
  Channel    Channel @relation(fields: [channel_id], references: [id], onDelete: Cascade)
  Menu       Menu    @relation(fields: [menu_id], references: [id], onDelete: Cascade)
  User       User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}
